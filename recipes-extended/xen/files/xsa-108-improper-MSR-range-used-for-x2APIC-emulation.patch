################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-108 (http://xenbits.xen.org/xsa/advisory-108.html)
x86/HVM: properly bound x2APIC MSR range

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-108.html
Patches: xsa108.patch

The MSR range specified for APIC use in the x2APIC access model spans
256 MSRs. Hypervisor code emulating read and write accesses to these MSRs
erroneously covered 1024 MSRs. While the write emulation path is written
such that accesses to the extra MSRs would not have any bad effect (they end up
being no-ops), the read path would (attempt to) access memory beyond the single
page set up for APIC emulation.

################################################################################
CHANGELOG 
################################################################################
Added in OpenXT, Xen 4.3.4 patch-queue: unknown

################################################################################
PATCHES 
################################################################################
diff --git a/xen/arch/x86/hvm/hvm.c b/xen/arch/x86/hvm/hvm.c
index 7efa274..26f0bf6 100644
--- a/xen/arch/x86/hvm/hvm.c
+++ b/xen/arch/x86/hvm/hvm.c
@@ -2926,7 +2926,7 @@ int hvm_msr_read_intercept(unsigned int msr, uint64_t *msr_content)
         *msr_content = vcpu_vlapic(v)->hw.apic_base_msr;
         break;
 
-    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0x3ff:
+    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0xff:
         if ( hvm_x2apic_msr_read(v, msr, msr_content) )
             goto gp_fault;
         break;
@@ -3052,7 +3052,7 @@ int hvm_msr_write_intercept(unsigned int msr, uint64_t msr_content)
         vlapic_tdt_msr_set(vcpu_vlapic(v), msr_content);
         break;
 
-    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0x3ff:
+    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0xff:
         if ( hvm_x2apic_msr_write(v, msr, msr_content) )
             goto gp_fault;
         break;
-- 
1.7.10.4

