################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-165 (http://xenbits.xen.org/xsa/advisory-165.html)
libxl: information leak in legacy x86 FPU/XMM initialization

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-165.html
Patches: xsa165-4.3.patch

When XSAVE/XRSTOR are not in use by Xen to manage guest extended register
state, the initial values in the FPU stack and XMM registers seen by the guest
upon first use are those left there by the previous user of those registers.

################################################################################
CHANGELOG 
################################################################################
Added in OpenXT, Xen 4.3.4 patch-queue: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
PATCHES 
################################################################################
Index: xen-4.3.4/xen/arch/x86/domain.c
===================================================================
--- xen-4.3.4.orig/xen/arch/x86/domain.c	2015-03-19 16:08:36.000000000 +0100
+++ xen-4.3.4/xen/arch/x86/domain.c	2015-12-18 18:15:44.813876567 +0100
@@ -730,6 +730,17 @@
 
     if ( flags & VGCF_I387_VALID )
         memcpy(v->arch.fpu_ctxt, &c.nat->fpu_ctxt, sizeof(c.nat->fpu_ctxt));
+    else if ( v->arch.xsave_area )
+        memset(&v->arch.xsave_area->xsave_hdr, 0,
+               sizeof(v->arch.xsave_area->xsave_hdr));
+    else
+    {
+        typeof(v->arch.xsave_area->fpu_sse) *fpu_sse = v->arch.fpu_ctxt;
+
+        memset(fpu_sse, 0, sizeof(*fpu_sse));
+        fpu_sse->fcw = FCW_DEFAULT;
+        fpu_sse->mxcsr = MXCSR_DEFAULT;
+    }
 
     if ( !compat )
     {
Index: xen-4.3.4/xen/arch/x86/i387.c
===================================================================
--- xen-4.3.4.orig/xen/arch/x86/i387.c	2015-03-19 16:08:36.000000000 +0100
+++ xen-4.3.4/xen/arch/x86/i387.c	2015-12-18 18:15:44.813876567 +0100
@@ -17,19 +17,6 @@
 #include <asm/xstate.h>
 #include <asm/asm_defns.h>
 
-static void fpu_init(void)
-{
-    unsigned long val;
-    
-    asm volatile ( "fninit" );
-    if ( cpu_has_xmm )
-    {
-        /* load default value into MXCSR control/status register */
-        val = MXCSR_DEFAULT;
-        asm volatile ( "ldmxcsr %0" : : "m" (val) );
-    }
-}
-
 /*******************************/
 /*     FPU Restore Functions   */
 /*******************************/
@@ -254,15 +241,8 @@
 
     if ( cpu_has_xsave )
         fpu_xrstor(v, XSTATE_LAZY);
-    else if ( v->fpu_initialised )
-    {
-        if ( cpu_has_fxsr )
-            fpu_fxrstor(v);
-        else
-            fpu_frstor(v);
-    }
     else
-        fpu_init();
+        fpu_fxrstor(v);
 
     v->fpu_initialised = 1;
     v->fpu_dirtied = 1;
@@ -323,7 +303,14 @@
     else
     {
         v->arch.fpu_ctxt = _xzalloc(sizeof(v->arch.xsave_area->fpu_sse), 16);
-        if ( !v->arch.fpu_ctxt )
+        if ( v->arch.fpu_ctxt )
+        {
+            typeof(v->arch.xsave_area->fpu_sse) *fpu_sse = v->arch.fpu_ctxt;
+
+            fpu_sse->fcw = FCW_DEFAULT;
+            fpu_sse->mxcsr = MXCSR_DEFAULT;
+        }
+        else
         {
             rc = -ENOMEM;
             goto done;
