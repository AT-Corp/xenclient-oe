################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-187 (http://xenbits.xen.org/xsa/advisory-187.html)
HVM Overflow of sh_ctxt->seg_reg[].

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-187.html
Patches: xsa187-0001-x86-shadow-Avoid-overflowing-sh_ctxt-seg_reg.patch
         xsa187-4.6-0002-x86-segment-Bounds-check-accesses-to-emulation-ctx.patch
     
x86 HVM guests running with shadow paging use a subset of the x86 emulator to
handle the guest writing to its own pagetables.  There are situations a guest
can provoke which result in exceeding the space allocated for internal state.
     
################################################################################
PATCHES 
################################################################################
Index: xen-4.3.4/xen/arch/x86/mm/shadow/common.c
===================================================================
--- xen-4.3.4.orig/xen/arch/x86/mm/shadow/common.c	2016-08-31 17:35:37.323531691 +0200
+++ xen-4.3.4/xen/arch/x86/mm/shadow/common.c	2016-08-31 17:35:37.530196436 +0200
@@ -137,9 +137,18 @@
     struct sh_emulate_ctxt *sh_ctxt,
     unsigned long *paddr)
 {
-    struct segment_register *reg = hvm_get_seg_reg(seg, sh_ctxt);
+    const struct segment_register *reg;
     int okay;
 
+    /*
+     * Can arrive here with non-user segments.  However, no such cirucmstance
+     * is part of a legitimate pagetable update, so fail the emulation.
+     */
+    if ( !is_x86_user_segment(seg) )
+        return X86EMUL_UNHANDLEABLE;
+
+    reg = hvm_get_seg_reg(seg, sh_ctxt);
+
     okay = hvm_virtual_to_linear_addr(
         seg, reg, offset, bytes, access_type, sh_ctxt->ctxt.addr_size, paddr);
 
Index: xen-4.3.4/xen/arch/x86/hvm/hvm.c
===================================================================
--- xen-4.3.4.orig/xen/arch/x86/hvm/hvm.c	2016-08-31 17:50:27.978569162 +0200
+++ xen-4.3.4/xen/arch/x86/hvm/hvm.c	2016-08-31 17:50:35.378500114 +0200
@@ -1966,7 +1966,7 @@
 
 int hvm_virtual_to_linear_addr(
     enum x86_segment seg,
-    struct segment_register *reg,
+    const struct segment_register *reg,
     unsigned long offset,
     unsigned int bytes,
     enum hvm_access_type access_type,
Index: xen-4.3.4/xen/include/asm-x86/hvm/hvm.h
===================================================================
--- xen-4.3.4.orig/xen/include/asm-x86/hvm/hvm.h	2016-08-31 17:50:27.995235674 +0200
+++ xen-4.3.4/xen/include/asm-x86/hvm/hvm.h	2016-08-31 17:50:35.528498714 +0200
@@ -441,7 +441,7 @@
 };
 int hvm_virtual_to_linear_addr(
     enum x86_segment seg,
-    struct segment_register *reg,
+    const struct segment_register *reg,
     unsigned long offset,
     unsigned int bytes,
     enum hvm_access_type access_type,
