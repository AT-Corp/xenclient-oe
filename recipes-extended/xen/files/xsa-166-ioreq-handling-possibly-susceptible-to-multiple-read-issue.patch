################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-166 (http://xenbits.xen.org/xsa/advisory-166.html)
ioreq handling possibly susceptible to multiple read issue

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-166.html
Patches: xsa166-4.3.patch

Single memory accesses in source code can be translated to multiple ones in
machine code by the compiler, requiring special caution when accessing shared
memory.  Such precaution was missing from the hypervisor code inspecting the
state of I/O requests sent to the device model for assistance.

Due to the offending field being a bitfield, it is however believed that there
is no issue in practice, since compilers, at least when optimizing (which is
always the case for non-debug builds), should find it more expensive to
extract the bit field value twice than to keep the calculated value in a
register.

################################################################################
CHANGELOG 
################################################################################
Added in OpenXT, Xen 4.3.4 patch-queue: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
PATCHES 
################################################################################
Index: xen-4.3.4/xen/arch/x86/hvm/hvm.c
===================================================================
--- xen-4.3.4.orig/xen/arch/x86/hvm/hvm.c	2015-12-14 13:24:27.571774385 +0100
+++ xen-4.3.4/xen/arch/x86/hvm/hvm.c	2015-12-18 18:18:20.308366202 +0100
@@ -342,6 +342,7 @@
 void hvm_do_resume(struct vcpu *v)
 {
     ioreq_t *p;
+    unsigned int state;
 
     pt_restore_timer(v);
 
@@ -349,9 +350,10 @@
 
     /* NB. Optimised for common case (p->state == STATE_IOREQ_NONE). */
     p = get_ioreq(v);
-    while ( p->state != STATE_IOREQ_NONE )
+    while ( (state = p->state) != STATE_IOREQ_NONE )
     {
-        switch ( p->state )
+        rmb();
+        switch ( state )
         {
         case STATE_IORESP_READY: /* IORESP_READY -> NONE */
             hvm_io_assist();
@@ -359,11 +361,10 @@
         case STATE_IOREQ_READY:  /* IOREQ_{READY,INPROCESS} -> IORESP_READY */
         case STATE_IOREQ_INPROCESS:
             wait_on_xen_event_channel(v->arch.hvm_vcpu.xen_port,
-                                      (p->state != STATE_IOREQ_READY) &&
-                                      (p->state != STATE_IOREQ_INPROCESS));
+                                      p->state != state);
             break;
         default:
-            gdprintk(XENLOG_ERR, "Weird HVM iorequest state %d.\n", p->state);
+            gdprintk(XENLOG_ERR, "Weird HVM iorequest state %u\n", state);
             domain_crash(v->domain);
             return; /* bail */
         }
