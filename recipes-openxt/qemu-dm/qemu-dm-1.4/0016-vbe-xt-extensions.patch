################################################################################
SHORT DESCRIPTION: 
################################################################################
VBE IO ports extension to synchronise QEMU, Surfman and VGABIOS requirements.

################################################################################
LONG DESCRIPTION: 
################################################################################
The way Surfman directly uses pages in the guest and scans a linear framebuffer
requires some condition to be met on stride alignment. IO ports make it easier
for VGABIOS exchange information with Surfman through QEMU.

Surfman and VGABIOS will use VBE extensions to exchange information about
display geometry early in the boot process.

Added VBE indexes are:
VBE_DISPI_EXT_INDEX_STRIDE          0xd     // Set the stride.
VBE_DISPI_EXT_INDEX_EDID_XRES       0xe     // RO: get the biggest resolution
VBE_DISPI_EXT_INDEX_EDID_YRES       0xf     //     possible yet with the
VBE_DISPI_EXT_INDEX_STRIDE_ALIGN    0x10    //     smallest stride alignment.
VBE_DISPI_EXT_INDEX_32BPP_ONLY      0x11    // RO: 32b depth requirement
VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY 0x12    // RO: Use only legacy resolutions.

################################################################################
CHANGELOG 
################################################################################
Documented: Eric Chanudet, chanudete@ainfosec.com, 17/03/2015
Ported to QEMU 1.4: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015

################################################################################
REMOVAL 
################################################################################
This patch is required by Surfman.
This patch is required by VGABIOS: vbe-extensions.patch.
This patch is required by VGABIOS: vbe-edid-interface.patch.

################################################################################
UPSTREAM PLAN 
################################################################################
This is OpenXT specific. There is no plan to upstream this patch.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Implemented by VGABIOS: vbe-extensions.patch
Implemented by VGABIOS: vbe-edid-interface.patch
Depended on by QEMU: surfman-dcl.patch.

################################################################################
PATCHES
################################################################################
Index: qemu-1.4.0/hw/vga.c
===================================================================
--- qemu-1.4.0.orig/hw/vga.c	2016-06-02 22:52:33.653820366 +0200
+++ qemu-1.4.0/hw/vga.c	2016-06-02 22:55:26.725265035 +0200
@@ -32,6 +32,10 @@
 #include "xen.h"
 #include "trace.h"
 
+#ifdef CONFIG_XEN
+# include "hw/xen.h"
+#endif
+
 //#define DEBUG_VGA
 //#define DEBUG_VGA_MEM
 //#define DEBUG_VGA_REG
@@ -645,7 +649,10 @@
     }
 
     /* check height */
-    linelength = r[VBE_DISPI_INDEX_VIRT_WIDTH] * bits / 8;
+    if (s->vbe_ext_regs[VBE_DISPI_EXT_INDEX_STRIDE - VBE_DISPI_EXT_INDEX_START])
+        linelength = s->vbe_ext_regs[VBE_DISPI_EXT_INDEX_STRIDE - VBE_DISPI_EXT_INDEX_START];
+    else
+        linelength = r[VBE_DISPI_INDEX_VIRT_WIDTH] * bits / 8;
     maxy = s->vbe_size / linelength;
     if (r[VBE_DISPI_INDEX_YRES] == 0) {
         r[VBE_DISPI_INDEX_YRES] = 1;
@@ -761,6 +768,30 @@
         val = s->vbe_size / (64 * 1024);
     } else {
         val = 0;
+        if (!(s->vbe_regs[VBE_DISPI_INDEX_ENABLE] & VBE_DISPI_GETCAPS)) {
+            uint32_t u1, u2;
+            switch (s->vbe_index) {
+                case VBE_DISPI_EXT_INDEX_EDID_XRES:
+                    dpy_get_display_limits(s->ds, &val, &u1, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_EDID_YRES:
+                    dpy_get_display_limits(s->ds, &u1, &val, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_STRIDE_ALIGN:
+                    dpy_get_display_limits(s->ds, &u1, &u2, &val);
+                    break;
+#ifdef CONFIG_XEN
+                case VBE_DISPI_EXT_INDEX_32BPP_ONLY:
+                    val = xenstore_is_32bpp_only();
+                    break;
+                case VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY:
+                    val = xenstore_is_legacy_res_only();
+                    break;
+#endif /* CONFIG_XEN */
+                default:
+                    break;
+            }
+        }
     }
 #ifdef DEBUG_BOCHS_VBE
     printf("VBE: read index=0x%x val=0x%x\n", s->vbe_index, val);
@@ -835,6 +866,16 @@
         default:
             break;
         }
+    } else if ((s->vbe_index >= VBE_DISPI_EXT_INDEX_START) &&
+        (s->vbe_index < VBE_DISPI_EXT_INDEX_START + VBE_DISPI_EXT_INDEX_NB)) {
+        switch (s->vbe_index) {
+            case VBE_DISPI_EXT_INDEX_STRIDE:
+                s->vbe_line_offset = val;
+                s->vbe_ext_regs[VBE_DISPI_EXT_INDEX_STRIDE - VBE_DISPI_EXT_INDEX_START] = val;
+                break;
+            default:
+                break;
+        }
     }
 }
 
Index: qemu-1.4.0/hw/xen.h
===================================================================
--- qemu-1.4.0.orig/hw/xen.h	2016-06-02 22:52:33.863818075 +0200
+++ qemu-1.4.0/hw/xen.h	2016-06-02 22:52:37.393779552 +0200
@@ -69,5 +69,7 @@
 };
 
 int xenstore_update_power(enum xenstore_pm_type const type);
+bool xenstore_is_32bpp_only(void);
+bool xenstore_is_legacy_res_only(void);
 
 #endif /* QEMU_HW_XEN_H */
Index: qemu-1.4.0/hw/xen_backend.c
===================================================================
--- qemu-1.4.0.orig/hw/xen_backend.c	2016-06-02 22:52:34.030482923 +0200
+++ qemu-1.4.0/hw/xen_backend.c	2016-06-02 22:52:37.463778787 +0200
@@ -924,3 +924,37 @@
 
     return xenstore_write_int(dompath, "power-state", type);
 }
+
+
+/****************************************************
+ * XenClient: VBE exstentions. */
+bool xenstore_is_32bpp_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplaydepth", &val)) {
+        return false;
+    }
+    return (val == 32);
+}
+
+bool xenstore_is_legacy_res_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplayres", &val)) {
+        return false;
+    }
+    return !!val;
+}
+
Index: qemu-1.4.0/include/ui/console.h
===================================================================
--- qemu-1.4.0.orig/include/ui/console.h	2016-06-02 22:52:34.200481068 +0200
+++ qemu-1.4.0/include/ui/console.h	2016-06-02 22:52:37.530444727 +0200
@@ -167,6 +167,9 @@
     void (*dpy_mouse_set)(struct DisplayState *s, int x, int y, int on);
     void (*dpy_cursor_define)(struct DisplayState *s, QEMUCursor *cursor);
 
+    void (*dpy_get_display_limits)(struct DisplayState *s, unsigned int *width, unsigned int *height,
+                                   unsigned int *stride_alignment);
+
     QLIST_ENTRY(DisplayChangeListener) next;
 };
 
@@ -350,6 +353,28 @@
     return false;
 }
 
+static inline void dpy_get_display_limits(struct DisplayState *s, unsigned int *width, unsigned int *height,
+                                          unsigned int *stride_alignment)
+{
+    struct DisplayChangeListener *dcl;
+    unsigned int w, h, a;
+
+    *width = 1920;
+    *height = 1200;
+    *stride_alignment = 1;  /* HACK: Keep the biggest supported resolution and the smallest required stride alignment. */
+    QLIST_FOREACH(dcl, &s->listeners, next) {
+        if (dcl->dpy_get_display_limits) {
+            dcl->dpy_get_display_limits(s, &w, &h, &a);
+            if ((*width > w) || (*height > h)) {
+                *width = w;
+                *height = h;
+	    }
+            if (*stride_alignment < a)
+                *stride_alignment = a;
+        }
+    }
+}
+
 static inline int ds_get_linesize(DisplayState *ds)
 {
     return pixman_image_get_stride(ds->surface->image);
Index: qemu-1.4.0/hw/vga_int.h
===================================================================
--- qemu-1.4.0.orig/hw/vga_int.h	2016-06-02 22:52:34.403812183 +0200
+++ qemu-1.4.0/hw/vga_int.h	2016-06-02 22:52:37.630443635 +0200
@@ -45,9 +45,18 @@
 #define VBE_DISPI_INDEX_VIRT_HEIGHT     0x7
 #define VBE_DISPI_INDEX_X_OFFSET        0x8
 #define VBE_DISPI_INDEX_Y_OFFSET        0x9
-#define VBE_DISPI_INDEX_NB              0xa /* size of vbe_regs[] */
+#define VBE_DISPI_INDEX_NB              0xa  /* size of vbe_regs[] */
 #define VBE_DISPI_INDEX_VIDEO_MEMORY_64K 0xa /* read-only, not in vbe_regs */
 
+#define VBE_DISPI_EXT_INDEX_START           0xd
+#define VBE_DISPI_EXT_INDEX_STRIDE          (VBE_DISPI_EXT_INDEX_START + 0x0) /* 0xd */
+#define VBE_DISPI_EXT_INDEX_NB              0x1 /* size of vbe_ext_regs[] */
+#define VBE_DISPI_EXT_INDEX_EDID_XRES       (VBE_DISPI_EXT_INDEX_START + 0x1) /* 0xe -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_EDID_YRES       (VBE_DISPI_EXT_INDEX_START + 0x2) /* 0xf -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_STRIDE_ALIGN    (VBE_DISPI_EXT_INDEX_START + 0x3) /* 0x10 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_32BPP_ONLY      (VBE_DISPI_EXT_INDEX_START + 0x4) /* 0x11 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY (VBE_DISPI_EXT_INDEX_START + 0x5) /* 0x12 -- read-only, not in vbe_regs */
+
 #define VBE_DISPI_ID0                   0xB0C0
 #define VBE_DISPI_ID1                   0xB0C1
 #define VBE_DISPI_ID2                   0xB0C2
@@ -128,6 +137,7 @@
     /* bochs vbe state */
     uint16_t vbe_index;
     uint16_t vbe_regs[VBE_DISPI_INDEX_NB];
+    uint16_t vbe_ext_regs[VBE_DISPI_EXT_INDEX_NB];
     uint32_t vbe_start_addr;
     uint32_t vbe_line_offset;
     uint32_t vbe_bank_mask;
Index: qemu-1.4.0/hw/vga-pci.c
===================================================================
--- qemu-1.4.0.orig/hw/vga-pci.c	2016-06-02 22:52:34.553810545 +0200
+++ qemu-1.4.0/hw/vga-pci.c	2016-06-02 22:52:37.690442981 +0200
@@ -196,6 +196,8 @@
     k->vendor_id = PCI_VENDOR_ID_QEMU;
     k->device_id = PCI_DEVICE_ID_QEMU_VGA;
     k->class_id = PCI_CLASS_DISPLAY_VGA;
+    k->subsystem_vendor_id = PCI_VENDOR_ID_XEN;
+    k->subsystem_id = 0x0001;
     dc->vmsd = &vmstate_vga_pci;
     dc->props = vga_pci_properties;
 }
