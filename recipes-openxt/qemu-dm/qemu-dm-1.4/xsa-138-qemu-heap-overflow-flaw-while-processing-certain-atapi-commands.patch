################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-138 (http://xenbits.xen.org/xsa/advisory-138.html)
QEMU heap overflow flaw while processing certain ATAPI commands.

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-138.html
Patches: xsa138-qemuu-{1,2,3}.patch

A heap overflow flaw was found in the way QEMU's IDE subsystem handled I/O
buffer access while processing certain ATAPI commands.

A privileged guest user in a guest with CDROM drive enabled could potentially
use this flaw to execute arbitrary code on the host with the privileges of the
host's QEMU process corresponding to the guest.

################################################################################
CHANGELOG 
################################################################################
Added in OpenXT, Xen 4.3.4 patch-queue: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
PATCHES 
################################################################################
Index: qemu-1.4.0/hw/ide/core.c
===================================================================
--- qemu-1.4.0.orig/hw/ide/core.c	2013-02-16 00:05:35.000000000 +0100
+++ qemu-1.4.0/hw/ide/core.c	2015-11-05 16:54:41.456970812 +0100
@@ -1790,11 +1790,17 @@
     }
 
     p = s->data_ptr;
+    if (p + 2 > s->data_end) {
+        return;
+    }
+
     *(uint16_t *)p = le16_to_cpu(val);
     p += 2;
     s->data_ptr = p;
-    if (p >= s->data_end)
+    if (p >= s->data_end) {
+        s->status &= ~DRQ_STAT;
         s->end_transfer_func(s);
+    }
 }
 
 uint32_t ide_data_readw(void *opaque, uint32_t addr)
@@ -1811,11 +1817,17 @@
     }
 
     p = s->data_ptr;
+    if (p + 2 > s->data_end) {
+        return 0;
+    }
+
     ret = cpu_to_le16(*(uint16_t *)p);
     p += 2;
     s->data_ptr = p;
-    if (p >= s->data_end)
+    if (p >= s->data_end) {
+        s->status &= ~DRQ_STAT;
         s->end_transfer_func(s);
+    }
     return ret;
 }
 
@@ -1832,11 +1844,17 @@
     }
 
     p = s->data_ptr;
+    if (p + 4 > s->data_end) {
+        return;
+    }
+
     *(uint32_t *)p = le32_to_cpu(val);
     p += 4;
     s->data_ptr = p;
-    if (p >= s->data_end)
+    if (p >= s->data_end) {
+        s->status &= ~DRQ_STAT;
         s->end_transfer_func(s);
+    }
 }
 
 uint32_t ide_data_readl(void *opaque, uint32_t addr)
@@ -1853,11 +1871,17 @@
     }
 
     p = s->data_ptr;
+    if (p + 4 > s->data_end) {
+        return 0;
+    }
+
     ret = cpu_to_le32(*(uint32_t *)p);
     p += 4;
     s->data_ptr = p;
-    if (p >= s->data_end)
+    if (p >= s->data_end) {
+        s->status &= ~DRQ_STAT;
         s->end_transfer_func(s);
+    }
     return ret;
 }
 
Index: qemu-1.4.0/hw/ide/atapi.c
===================================================================
--- qemu-1.4.0.orig/hw/ide/atapi.c	2013-02-16 00:05:35.000000000 +0100
+++ qemu-1.4.0/hw/ide/atapi.c	2015-11-05 16:54:37.670356936 +0100
@@ -879,6 +879,7 @@
 
     if (pwrcnd) {
         /* eject/load only happens for power condition == 0 */
+        ide_atapi_cmd_ok(s);
         return;
     }
 
